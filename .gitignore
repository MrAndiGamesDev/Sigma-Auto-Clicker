# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
AutoClickerPy/
AutoClickerPy/*
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
pip-wheel-metadata/
certificate.*
sign.*
signtool.exe
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/
# Python Bytecode and Optimized Files
# Ignores compiled Python files, Windows DLLs, and shared objects
__pycache__/           # Cache directories for Python 3 bytecode
*.py[cod]              # Compiled (.pyc), optimized (.pyo), debug (.pyd)
*$py.class             # Jython class files (rare, included for completeness)
*.pyd                  # Windows Python extension DLLs
*.so                   # Shared object files (Linux/macOS)

# PyInstaller Artifacts
# Ignores build outputs from PyInstaller for Windows executable
build/                 # Temporary build directory
dist/                  # Distribution directory with final executable
*.spec                 # PyInstaller spec files
*.manifest             # Windows manifest files for executable metadata
Sigma-Auto-Clicker.exe # Project-specific executable output
# FIX 1: Removed redundant 'AutoClickerPy/*' and kept 'AutoClickerPy/'
# Reason: 'AutoClickerPy/' already ignores the directory and all contents
AutoClickerPy/         # Potential PyInstaller output directory

# Virtual Environments
# Ignores virtual environment directories and env configs
.venv/                 # Standard virtualenv directory
env/                   # Common alternative name
venv/                  # Another common name
ENV/                   # Uppercase variant
env.bak/               # Backup env directories
venv.bak/              # Backup venv directories
.env                   # Environment variable files (e.g., for dotenv)
.envrc                 # direnv configuration

# Dependency Management
# Lock files for dependency managers (uncomment the one used)
# Reason: Commented out to avoid ignoring unused lock files; uncomment for reproducibility
# Pipenv
# Pipfile.lock
# Poetry
# poetry.lock
# poetry.toml
# PDM
# pdm.lock
.pdm-python            # PDM Python version file
.pdm-build/            # PDM build directory
# UV
# uv.lock
# Pixi
# pixi.lock
.pixi/                 # Pixi virtual environment

# Logs
# Ignores log files, including custom logging output
*.log                  # General log files
logs/                  # Log directory
src/Packages/CustomLogging/*.log  # Custom logging module logs

# Packaging and Distribution
# Igires packaging metadata and artifacts
*.egg                  # Python egg files
*.egg-info/            # Egg metadata directories
.eggs/                 # Egg temporary directories
pip-wheel-metadata/    # Pip wheel metadata
.installed.cfg         # Installation config files
MANIFEST               # MANIFEST file for packaging
certificate.*          # Signing certificates for executables
sign.*                 # Signing-related files
signtool.exe           # Windows signing tool

# Testing and Coverage
# Ignores test and coverage artifacts
.coverage              # Coverage.py data file
.coverage.*            # Additional coverage files
.pytest_cache/         # Pytest cache directory
htmlcov/               # HTML coverage reports
.tox/                  # Tox testing environment
.nox/                  # Nox testing environment
nosestests.xml         # Nosetests output
coverage.xml           # Coverage XML report
*.cover                # Coverage annotation files
.hypothesis/           # Hypothesis testing temp files
cover/                 # Alternative coverage directory

# GUI and Image Artifacts
# Ignores temporary files from CustomTkinter and PIL
*.ico                  # Icon files (e.g., for system tray)
*.png                  # Temporary images (e.g., for GUI testing)

# IDE and Editor Files
# Ignores IDE-specific files (commented to allow sharing configs if desired)
# PyCharm
# .idea/
# VS Code
# .vscode/
.spyderproject         # Spyder project files
.spyproject            # Spyder project files (alternative)
.ropeproject           # Rope refactoring tool config

# OS-Specific Files
# Ignores files generated by operating systems and editors
.DS_Store              # macOS Finder metadata
Thumbs.db              # Windows thumbnail cache
*.swp                  # Vim swap files
*.swo                  # Vim swap files (alternative)

# PyPI Configuration
.pypirc
# Ignores PyPI credentials
.pypirc                # PyPI configuration file

# Dev Branch Experimental Files
# FIX 2: Added patterns for dev branch temporary/exexperimental files
# Reason: dev branch may include temporary scripts, configs, or debug outputs
dev_temp/              # Temporary directory for dev experiments
*.bak                  # Backup files (e.g., main.py.bak)
debug_*.py             # Debug scripts (e.g., debug_gui.py)
*.tmp                  # Temporary files
